<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on Jerry&#39;s Blog</title>
    <link>http://wjinlei.github.io/tags/rust/</link>
    <description>Recent content in rust on Jerry&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 25 Jul 2022 14:29:56 +0800</lastBuildDate><atom:link href="http://wjinlei.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust 学习笔记(8)-结构体</title>
      <link>http://wjinlei.github.io/posts/code-rust-struct/</link>
      <pubDate>Mon, 25 Jul 2022 14:29:56 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-struct/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch05-00-structs.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第5章 &lt;code&gt;结构体的定义和实例化&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;p&gt;结构体类似其他语言中的 &lt;code&gt;类 class&lt;/code&gt; 的概念，其作用主要是组织和存储相关联的数据或函数(与结构体相关联的函数一般又称为方法)&lt;/p&gt;
&lt;p&gt;本章我们主要来看下在 &lt;code&gt;Rust&lt;/code&gt; 中定义结构体的语法，比较简单，直接看代码吧&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(7)-Slice</title>
      <link>http://wjinlei.github.io/posts/code-rust-slice/</link>
      <pubDate>Fri, 22 Jul 2022 17:10:59 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-slice/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch04-03-slices.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第4.3章 &lt;code&gt;Slice 类型&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;slice 允许你引用集合中一段连续的元素序列，而不用引用整个集合。slice 是一类引用，所以它没有所有权。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本章比较简单，直接看代码吧&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(6)-引用与借用</title>
      <link>http://wjinlei.github.io/posts/code-rust-references_and_borrowing/</link>
      <pubDate>Fri, 22 Jul 2022 16:03:37 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-references_and_borrowing/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch04-02-references-and-borrowing.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第4.2章 &lt;code&gt;引用与借用&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;之前我们说过，当传入的变量发生移动时，函数外部无法再引用这个变量，除非函数将变量返回并且外部重新获取这个返回值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果我们还要接着使用这个变量的话，每次都传进去再返回来就有点麻烦了&lt;/p&gt;
&lt;p&gt;如果我们只想要函数使用一个变量的值，但不获取其所有权该怎么办呢？ 答: 可以使用 &lt;code&gt;&amp;amp;&lt;/code&gt; 关键字&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(5)-最最最重要的所有权</title>
      <link>http://wjinlei.github.io/posts/code-rust-ownership/</link>
      <pubDate>Thu, 21 Jul 2022 14:21:58 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-ownership/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch04-01-what-is-ownership.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第4.1章 &lt;code&gt;什么是所有权&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;p&gt;&lt;code&gt;所有权&lt;/code&gt;是整个&lt;code&gt;Rust&lt;/code&gt;中最重要的知识点，没有之一，理解&lt;code&gt;所有权&lt;/code&gt;才能明白&lt;code&gt;Rust&lt;/code&gt;是如何保证&lt;code&gt;内存安全的&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(4)-函数</title>
      <link>http://wjinlei.github.io/posts/code-rust-function/</link>
      <pubDate>Thu, 21 Jul 2022 14:02:46 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-function/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch03-03-how-functions-work.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第3.3 &lt;code&gt;函数&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里说明一下，有些章节，我认为没什么可写的，因此跳过了，例如本次就跳过了书中的3.2数据类型这一章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;code&gt;Rust&lt;/code&gt;中函数使用&lt;code&gt;fn&lt;/code&gt;关键字命名，并且采用&lt;code&gt;snake case&lt;/code&gt;风格，在&lt;code&gt;Rust&lt;/code&gt;中函数的返回值等同于函数体最后一个表达式的值&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(3)-变量与可变性</title>
      <link>http://wjinlei.github.io/posts/code-rust-mutvar/</link>
      <pubDate>Wed, 20 Jul 2022 15:13:53 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-mutvar/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch03-01-variables-and-mutability.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第3.1 &lt;code&gt;变量与可变性&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;变量默认是不可改变的，如果声明一个变量不会变，它就真的不会变&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;所以你不必自己跟踪它，你不必担心它会在其他地方被改变&lt;/code&gt;，因此它能让你的代码更&lt;strong&gt;易于推导&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(2)-猜数字游戏</title>
      <link>http://wjinlei.github.io/posts/code-rust-guessing_game/</link>
      <pubDate>Wed, 20 Jul 2022 14:12:50 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-guessing_game/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch02-00-guessing-game-tutorial.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第二章 &lt;code&gt;写个猜数字游戏&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;p&gt;下面是项目依赖&lt;code&gt;Cargo.toml&lt;/code&gt;，我们需要用到 &lt;code&gt;rand&lt;/code&gt; 这个 &lt;code&gt;crate&lt;/code&gt;，&lt;code&gt;rand&lt;/code&gt;为我们提供了产生随机数的功能，这在我们的代码中会用到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;crate&lt;/code&gt;你可以把他理解为&lt;code&gt;Java中的包&lt;/code&gt;或者其他语言中的库的概念&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;package&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rs03-guessing_game&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;edition&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2018&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;dependencies&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.8.3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(1)-安装Rust</title>
      <link>http://wjinlei.github.io/posts/code-rust-hello/</link>
      <pubDate>Wed, 20 Jul 2022 11:40:57 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-hello/</guid>
      <description>&lt;p&gt;21年的时候粗略过了一遍《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/title-page.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》,觉得&lt;code&gt;Rust&lt;/code&gt;的很多设计理念非常不错，是门不错的语言&lt;/p&gt;
&lt;p&gt;但当时由于种种原因，没有把学到的用于实践，过了近一年，现在都差不多全忘了，囧&lt;/p&gt;
&lt;p&gt;而如今我的博客也弄好了，索性就重新开坑，学习下&lt;code&gt;Rust&lt;/code&gt;，今天就先记录下我在&lt;code&gt;Arch&lt;/code&gt;上安装&lt;code&gt;Rust&lt;/code&gt;，并写个&lt;code&gt;Hello World&lt;/code&gt;吧&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式之适配器模式(rust实现)</title>
      <link>http://wjinlei.github.io/posts/code-rust-adapter/</link>
      <pubDate>Thu, 04 Nov 2021 01:41:53 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-adapter/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;设计模式之适配器模式(Rust实现)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>rust读写ini</title>
      <link>http://wjinlei.github.io/posts/code-rustini/</link>
      <pubDate>Thu, 04 Nov 2021 01:39:54 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rustini/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;代码示例(需要 configparser 库)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
