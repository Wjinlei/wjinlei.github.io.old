<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on Jerry&#39;s Blog</title>
    <link>http://wjinlei.github.io/tags/rust/</link>
    <description>Recent content in rust on Jerry&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 04 Aug 2022 14:28:00 +0800</lastBuildDate><atom:link href="http://wjinlei.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust 学习笔记(17)-HashMap</title>
      <link>http://wjinlei.github.io/posts/code-rust-hashmap/</link>
      <pubDate>Thu, 04 Aug 2022 14:28:00 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-hashmap/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch08-02-strings.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第8.3章 &lt;code&gt;使用 Hash Map 储存键值对&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HashMap&lt;/code&gt; 是一种&lt;code&gt;键值对&lt;/code&gt;类型的容器，&lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; 储存了一个键类型 &lt;code&gt;K&lt;/code&gt; 对应一个值类型 &lt;code&gt;V&lt;/code&gt; 的映射。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(16)-String</title>
      <link>http://wjinlei.github.io/posts/code-rust-string/</link>
      <pubDate>Thu, 04 Aug 2022 10:31:13 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-string/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch08-02-strings.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第8.2章 &lt;code&gt;使用字符串储存 UTF-8 编码的文本&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在集合章节中讨论字符串的原因是，字符串就是作为字节的集合外加一些方法实现的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在之前的章节我门曾了解过字符串 slice：它们是一些储存在别处的 UTF-8 编码字符串数据的引用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust 的核心语言中只有一种字符串类型：str，它通常以被借用的形式出现，&amp;amp;str。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而&lt;code&gt;String&lt;/code&gt;是由标准库提供的，而没有写进核心语言部分，它是&lt;code&gt;可增长的&lt;/code&gt;、&lt;code&gt;可变的&lt;/code&gt;、&lt;code&gt;有所有权的&lt;/code&gt;、&lt;code&gt;UTF-8 编码的&lt;/code&gt;字符串类型。&lt;br&gt;
你可以把它理解为&lt;code&gt;Java&lt;/code&gt;中的&lt;code&gt;字符串包装类&lt;/code&gt;，它提供了一系列方便的功能，下面我门就来看看它的大致用法&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(15)-Vector</title>
      <link>http://wjinlei.github.io/posts/code-rust-vector/</link>
      <pubDate>Wed, 03 Aug 2022 14:46:41 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-vector/</guid>
      <description>&lt;p&gt;Vector 是《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch08-01-vectors.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第8.1章 &lt;code&gt;使用 Vector 储存列表&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我想强调是，书中这一章节主要是在讲集合，集合是一种存储数据的容器，&lt;br&gt;
我把它理解为一种工具，对于这种工具我们不用太过纠结其原理，只要大致了解下它有什么用，怎么用，在适合的时候，能想的起来应该用它就行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Vector 的特点: 只能储存相同类型的值，Vector 可以理解为一个动态数组&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(14)-模块系统</title>
      <link>http://wjinlei.github.io/posts/code-rust-mod/</link>
      <pubDate>Wed, 03 Aug 2022 10:45:50 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-mod/</guid>
      <description>&lt;p&gt;模块系统 是《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第7章的全部内容，啰里八嗦了一整章，人都绕晕了，我相信大家和我一样，哈哈哈&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是包(Packages)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;简单来说，你的项目就是一个包，每一个包(Package)都有一个&lt;code&gt;Cargo.toml&lt;/code&gt;文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;用 cargo new xxx 创建出来的项目 xxx 就是一个二进制包  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;用 cargo new --lib xxx 创建出来的项目 xxx 就是一个类库包
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;什么是箱(Crate)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;箱(Crate)类似一种&lt;code&gt;&amp;quot;看不见，摸不着&amp;quot;&lt;/code&gt;的概念，它是一个模块的树形结构，它形成了库或二进制项目&lt;br&gt;
Crate 会将一个作用域内的相关功能分组到一起，使得该功能可以很方便地在多个项目之间共享。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;编译生成的可执行文件，你就可以把它看成是一个箱(Crate)，一个库(lib)项目，你也可以把他看成是一个箱(Crate)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;一个包下至少有一个箱(Crate), 可以是类库箱(Crate)，也可以是二进制箱(Crate)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;一个包下可以包含任意多个二进制箱(Crate)，但只能包含 0 或 1个类库箱(Crate)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Rust中的默认箱(crate):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;src/main.rs // 二进制箱(binary crate)的根文件,该箱(crate)与包(package)同名
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;src/lib.rs  // 类库箱(library crate)的根文件 ,该箱(crate)与包(package)同名
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;多个二进制箱(binary crates):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;在src/bin目录下创建.rs文件, 每个文件都是一个二进制箱(Crate)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(13)-if-let</title>
      <link>http://wjinlei.github.io/posts/code-rust-iflet/</link>
      <pubDate>Tue, 02 Aug 2022 15:44:53 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-iflet/</guid>
      <description>&lt;p&gt;&lt;code&gt;if let&lt;/code&gt; 是一个语法糖，它可以简化 &lt;code&gt;match&lt;/code&gt; 的写法&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(12)-match</title>
      <link>http://wjinlei.github.io/posts/code-rust-match/</link>
      <pubDate>Tue, 02 Aug 2022 14:19:35 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-match/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;match&lt;/code&gt; 允许我们将一个值与一系列的模式相比较，并根据相匹配的模式执行相应代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上一节我们学习了&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;，这一节我们就来学习下，如何处理&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们先看一个简单的例子，处理&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x: &lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; y: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Some(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 处理`Option`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; y {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Some(i) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; i,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            None &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; z;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(11)-Option</title>
      <link>http://wjinlei.github.io/posts/code-rust-option/</link>
      <pubDate>Mon, 25 Jul 2022 17:09:02 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-option/</guid>
      <description>&lt;p&gt;我们之前提到了在Rust中有一个非常常用的枚举 &lt;code&gt;Option&lt;/code&gt;，它的原型是如下的样子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    None,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Some(T),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它代表了有值和没有值的情况，成员 &lt;code&gt;None&lt;/code&gt; 代表没有值，也就是空值的情况，&lt;code&gt;Some(T)&lt;/code&gt; 代表了有值的情况，换句话说 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 代表了一个可能为空的值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 枚举是如此有用以至于它甚至被包含在了 &lt;code&gt;prelude&lt;/code&gt; 之中，你不需要将其显式引入作用域。&lt;br&gt;
另外，它的成员也是如此，可以不需要 Option:: 前缀来直接使用 Some 和 None。即便如此 Some(T) 和 None 仍是 Option&lt;!-- raw HTML omitted --&gt; 的成员。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;这有什么好处或者说什么用处呢？Rust为什么要这么设计它？它和其他语言中的&lt;code&gt;null&lt;/code&gt;有什么不同？下面我说说我的见解&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(10)-枚举</title>
      <link>http://wjinlei.github.io/posts/code-rust-enum/</link>
      <pubDate>Mon, 25 Jul 2022 16:00:57 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-enum/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch06-00-enums.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第6.1章 &lt;code&gt;枚举&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;p&gt;枚举是一个很多语言都有的功能，不过不同语言中其功能各不相同，Rust中的枚举允许你通过列举可能的成员（variants）来定义一个类型&lt;/p&gt;
&lt;p&gt;枚举主要作用是限制传入或传出的类型，避免出现其他类型，这在Rust中有一个著名的枚举 &lt;code&gt;Option&lt;/code&gt; 我们稍后会学习&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(9)-方法</title>
      <link>http://wjinlei.github.io/posts/code-rust-method/</link>
      <pubDate>Mon, 25 Jul 2022 15:13:51 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-method/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch05-03-method-syntax.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第5.3章 &lt;code&gt;方法语法&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;p&gt;之前我们提到过 &lt;code&gt;方法&lt;/code&gt; 就是 &lt;code&gt;函数&lt;/code&gt;，只不过他是定义在结构体上下文中的，这个就是其他语言中的方法的概念一样，没什么好说的&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(8)-结构体</title>
      <link>http://wjinlei.github.io/posts/code-rust-struct/</link>
      <pubDate>Mon, 25 Jul 2022 14:29:56 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-struct/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch05-00-structs.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第5.1章 &lt;code&gt;结构体的定义和实例化&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;p&gt;结构体类似其他语言中的 &lt;code&gt;类 class&lt;/code&gt; 的概念，其作用主要是组织和存储相关联的数据或函数(与结构体相关联的函数一般又称为方法)&lt;/p&gt;
&lt;p&gt;本章我们主要来看下在 &lt;code&gt;Rust&lt;/code&gt; 中定义结构体的语法，比较简单，直接看代码吧&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(7)-Slice</title>
      <link>http://wjinlei.github.io/posts/code-rust-slice/</link>
      <pubDate>Fri, 22 Jul 2022 17:10:59 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-slice/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch04-03-slices.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第4.3章 &lt;code&gt;Slice 类型&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;slice 允许你引用集合中一段连续的元素序列，而不用引用整个集合。slice 是一类引用，所以它没有所有权。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本章比较简单，直接看代码吧&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(6)-引用与借用</title>
      <link>http://wjinlei.github.io/posts/code-rust-references_and_borrowing/</link>
      <pubDate>Fri, 22 Jul 2022 16:03:37 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-references_and_borrowing/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch04-02-references-and-borrowing.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第4.2章 &lt;code&gt;引用与借用&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;之前我们说过，当传入的变量发生移动时，函数外部无法再引用这个变量，除非函数将变量返回并且外部重新获取这个返回值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果我们还要接着使用这个变量的话，每次都传进去再返回来就有点麻烦了&lt;/p&gt;
&lt;p&gt;如果我们只想要函数使用一个变量的值，但不获取其所有权该怎么办呢？ 答: 可以使用 &lt;code&gt;&amp;amp;&lt;/code&gt; 关键字&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(5)-最最最重要的所有权</title>
      <link>http://wjinlei.github.io/posts/code-rust-ownership/</link>
      <pubDate>Thu, 21 Jul 2022 14:21:58 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-ownership/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch04-01-what-is-ownership.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第4.1章 &lt;code&gt;什么是所有权&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;p&gt;&lt;code&gt;所有权&lt;/code&gt;是整个&lt;code&gt;Rust&lt;/code&gt;中最重要的知识点，没有之一，理解&lt;code&gt;所有权&lt;/code&gt;才能明白&lt;code&gt;Rust&lt;/code&gt;是如何保证&lt;code&gt;内存安全的&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(4)-函数</title>
      <link>http://wjinlei.github.io/posts/code-rust-function/</link>
      <pubDate>Thu, 21 Jul 2022 14:02:46 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-function/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch03-03-how-functions-work.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第3.3 &lt;code&gt;函数&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里说明一下，有些章节，我认为没什么可写的，因此跳过了，例如本次就跳过了书中的3.2数据类型这一章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;code&gt;Rust&lt;/code&gt;中函数使用&lt;code&gt;fn&lt;/code&gt;关键字命名，并且采用&lt;code&gt;snake case&lt;/code&gt;风格，在&lt;code&gt;Rust&lt;/code&gt;中函数的返回值等同于函数体最后一个表达式的值&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(3)-变量与可变性</title>
      <link>http://wjinlei.github.io/posts/code-rust-mutvar/</link>
      <pubDate>Wed, 20 Jul 2022 15:13:53 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-mutvar/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch03-01-variables-and-mutability.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第3.1 &lt;code&gt;变量与可变性&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;变量默认是不可改变的，如果声明一个变量不会变，它就真的不会变&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;所以你不必自己跟踪它，你不必担心它会在其他地方被改变&lt;/code&gt;，因此它能让你的代码更&lt;strong&gt;易于推导&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(2)-猜数字游戏</title>
      <link>http://wjinlei.github.io/posts/code-rust-guessing_game/</link>
      <pubDate>Wed, 20 Jul 2022 14:12:50 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-guessing_game/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch02-00-guessing-game-tutorial.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第二章 &lt;code&gt;写个猜数字游戏&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;p&gt;下面是项目依赖&lt;code&gt;Cargo.toml&lt;/code&gt;，我们需要用到 &lt;code&gt;rand&lt;/code&gt; 这个 &lt;code&gt;crate&lt;/code&gt;，&lt;code&gt;rand&lt;/code&gt;为我们提供了产生随机数的功能，这在我们的代码中会用到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;crate&lt;/code&gt;你可以把他理解为&lt;code&gt;Java中的包&lt;/code&gt;或者其他语言中的库的概念&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;package&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rs03-guessing_game&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;edition&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2018&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;dependencies&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.8.3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(1)-安装Rust</title>
      <link>http://wjinlei.github.io/posts/code-rust-hello/</link>
      <pubDate>Wed, 20 Jul 2022 11:40:57 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-hello/</guid>
      <description>&lt;p&gt;21年的时候粗略过了一遍《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/title-page.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》,觉得&lt;code&gt;Rust&lt;/code&gt;的很多设计理念非常不错，是门不错的语言&lt;/p&gt;
&lt;p&gt;但当时由于种种原因，没有把学到的用于实践，过了近一年，现在都差不多全忘了，囧&lt;/p&gt;
&lt;p&gt;而如今我的博客也弄好了，索性就重新开坑，学习下&lt;code&gt;Rust&lt;/code&gt;，今天就先记录下我在&lt;code&gt;Arch&lt;/code&gt;上安装&lt;code&gt;Rust&lt;/code&gt;，并写个&lt;code&gt;Hello World&lt;/code&gt;吧&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式之适配器模式(rust实现)</title>
      <link>http://wjinlei.github.io/posts/code-rust-adapter/</link>
      <pubDate>Thu, 04 Nov 2021 01:41:53 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-adapter/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;设计模式之适配器模式(Rust实现)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>rust读写ini</title>
      <link>http://wjinlei.github.io/posts/code-rustini/</link>
      <pubDate>Thu, 04 Nov 2021 01:39:54 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rustini/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;代码示例(需要 configparser 库)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
