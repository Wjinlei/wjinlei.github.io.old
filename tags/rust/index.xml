<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on Jerry&#39;s Blog</title>
    <link>http://wjinlei.github.io/tags/rust/</link>
    <description>Recent content in rust on Jerry&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 23 Sep 2022 11:15:33 +0800</lastBuildDate><atom:link href="http://wjinlei.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust 学习笔记(38)-模式匹配</title>
      <link>http://wjinlei.github.io/posts/code-rust-pattern/</link>
      <pubDate>Fri, 23 Sep 2022 11:15:33 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-pattern/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch18-03-pattern-syntax.html&#34;&gt;Rust程序设计语言&lt;/a&gt;》第18.3章 &lt;code&gt;模式语法&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;模式是 Rust 中特殊的语法，它用来匹配类型中的结构，无论类型是简单还是复杂。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(37)-Rust的面向对象特性</title>
      <link>http://wjinlei.github.io/posts/code-rust-oop/</link>
      <pubDate>Thu, 22 Sep 2022 11:51:35 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-oop/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch17-01-what-is-oo.html&#34;&gt;Rust程序设计语言&lt;/a&gt;》第17.1章 &lt;code&gt;面向对象语言的特征&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们通常认为一门编程语言是否支持面向对象特性一般是看它是否支持&lt;code&gt;封装&lt;/code&gt;，&lt;code&gt;继承&lt;/code&gt;，&lt;code&gt;多态&lt;/code&gt;，这也就是&lt;code&gt;面向对象的三大特性&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(36)-Send与Sync</title>
      <link>http://wjinlei.github.io/posts/code-rust-send_sync/</link>
      <pubDate>Wed, 21 Sep 2022 10:46:25 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-send_sync/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://course.rs/advance/concurrency-with-threads/send-sync.html&#34;&gt;Rust语言圣经(Rust Course)&lt;/a&gt;》第3.6.6章 &lt;code&gt;基于 Send 和 Sync 的线程安全&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(35)-Atomic原子操作</title>
      <link>http://wjinlei.github.io/posts/code-rust-atomic/</link>
      <pubDate>Tue, 30 Aug 2022 15:45:53 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-atomic/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://course.rs/advance/concurrency-with-threads/sync2.html&#34;&gt;Rust语言圣经(Rust Course)&lt;/a&gt;》第3.6.5章 &lt;code&gt;线程同步：Atomic 原子类型与内存顺序&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(34)-Condvar</title>
      <link>http://wjinlei.github.io/posts/code-rust-condvar/</link>
      <pubDate>Fri, 26 Aug 2022 12:32:43 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-condvar/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://course.rs/advance/concurrency-with-threads/sync1.html#%E7%94%A8%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8Fcondvar%E6%8E%A7%E5%88%B6%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%90%8C%E6%AD%A5&#34;&gt;Rust语言圣经(Rust Course)&lt;/a&gt;》第3.6.4章 &lt;code&gt;用条件变量(Condvar)控制线程的同步&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何控制线程执行的顺序?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;锁&lt;/code&gt;可以保证&lt;code&gt;线程安全&lt;/code&gt;，但有时我们想&lt;code&gt;控制线程执行的顺序&lt;/code&gt;该怎么办呢?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;答: Rust 为我们提供了而 &lt;code&gt;Condvar(Condition Variables)&lt;/code&gt; 条件变量&lt;br&gt;
它通常和&lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;一起使用，一般用于&lt;code&gt;生产者消费者模型&lt;/code&gt;，它可以让一个&lt;code&gt;线程进入等待(锁)&lt;/code&gt;，直至被其他线程&lt;code&gt;唤醒&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(33)-Mutex</title>
      <link>http://wjinlei.github.io/posts/code-rust-mutex/</link>
      <pubDate>Thu, 25 Aug 2022 10:20:57 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-mutex/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch16-03-shared-state.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第16.2章 &lt;code&gt;共享状态并发&lt;/code&gt;&lt;br&gt;
参考章节《&lt;a href=&#34;https://course.rs/advance/concurrency-with-threads/sync1.html&#34;&gt;Rust语言圣经(Rust Course)&lt;/a&gt;》第3.6.4章 &lt;code&gt;线程同步：锁、Condvar 和信号量&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;除了&lt;/code&gt;上一章的&lt;code&gt;Channel(信道)&lt;/code&gt;以外，Rust也可以通过&lt;code&gt;操作共享内存&lt;/code&gt;的方式在&lt;code&gt;多个线程之间共享数据&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两种方式有什么区别&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;信道(消息传递方式)&lt;/code&gt;类似于&lt;code&gt;单所有权&lt;/code&gt;，一旦将一个值传送到信道中，将无法再使用这个值。&lt;br&gt;
&lt;code&gt;共享内存&lt;/code&gt;类似于&lt;code&gt;多所有权&lt;/code&gt;，多个线程可以同时访问相同的内存位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于&lt;code&gt;共享内存&lt;/code&gt;拥有&lt;code&gt;多所有权&lt;/code&gt;，因此出于&lt;code&gt;线程安全考虑&lt;/code&gt;，我们需要一个&lt;code&gt;机制&lt;/code&gt;来&lt;code&gt;限制同一时刻只能有一个线程能访问这块内存&lt;/code&gt;&lt;br&gt;
这个&lt;code&gt;机制&lt;/code&gt;就是&lt;code&gt;锁&lt;/code&gt;，&lt;code&gt;锁&lt;/code&gt;有很多种，我们先看看一个在多线程场景中最常用的&lt;code&gt;互斥锁&lt;/code&gt;，也有叫做&lt;code&gt;互斥体&lt;/code&gt;、&lt;code&gt;互斥器&lt;/code&gt;，它们&lt;code&gt;都是指同一个东西&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;我猜&lt;/code&gt;读到这里你肯定有一个疑问&lt;code&gt;如果我们对它做了限制，那和单所有权有什么区别? 那我为什么还要用共享内存的方式?&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个问题先别着急，我们在本章的最后再来讨论，现在，让我们先看看&lt;code&gt;互斥锁&lt;/code&gt;的用法&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(32)-Channel</title>
      <link>http://wjinlei.github.io/posts/code-rust-channel/</link>
      <pubDate>Wed, 24 Aug 2022 16:02:37 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-channel/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch16-02-message-passing.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第16.2章 &lt;code&gt;使用消息传递在线程间传送数据&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;学习&lt;code&gt;线程&lt;/code&gt;的两大难点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何在&lt;code&gt;多个线程之间共享数据&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如何保证&lt;code&gt;线程安全&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这一章我们就来看看在Rust中如何在&lt;code&gt;多个线程之间共享数据&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(31)-创建线程</title>
      <link>http://wjinlei.github.io/posts/code-rust-thread/</link>
      <pubDate>Wed, 24 Aug 2022 13:47:53 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-thread/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch16-01-threads.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第16.1章 &lt;code&gt;使用线程同时运行代码&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;线程&lt;/code&gt;就是&lt;code&gt;程序内部&lt;/code&gt;，可以同时运行的独立部分。平常我们说的&lt;code&gt;多线程编程&lt;/code&gt;，就是指&lt;code&gt;编写内部有多个任务同时运行的程序&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(30)-循环引用</title>
      <link>http://wjinlei.github.io/posts/code-rust-circular_reference/</link>
      <pubDate>Fri, 19 Aug 2022 13:39:48 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-circular_reference/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这一章我建议结合&lt;code&gt;《Rust 语言圣经(Rust Course)》&lt;/code&gt;这本书一起看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch15-06-reference-cycles.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第15.6章 &lt;code&gt;引用循环与内存泄漏&lt;/code&gt;&lt;br&gt;
参考章节《&lt;a href=&#34;https://course.rs/advance/circle-self-ref/intro.html&#34;&gt;Rust语言圣经(Rust Course)&lt;/a&gt;》第3.5章 &lt;code&gt;循环引用与自引用&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这一章主要是在讲&lt;code&gt;内存泄漏&lt;/code&gt;问题，如果你现在看不明白，&lt;code&gt;暂时跳过&lt;/code&gt;也没关系(因为就算你暂时不了解它，你平常应该也很难写出内存泄漏的代码)&lt;br&gt;
虽然 &lt;code&gt;Rust&lt;/code&gt; 并 &lt;code&gt;不保证完全地避免内存泄漏&lt;/code&gt;，但你仍然难以写出内存泄漏的代码，除非你故意的，因此你&lt;code&gt;暂时&lt;/code&gt;跳过这一章我认为也是可以的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一章主要在阐述下面两个问题，了解它们，将对你写出&lt;code&gt;更高质量&lt;/code&gt;的代码有很大的帮助。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;什么情况可能会发生内存泄漏&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;如何最大程度的避免内存泄漏&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(29)-RefCell&lt;T&gt;</title>
      <link>http://wjinlei.github.io/posts/code-rust-refcell/</link>
      <pubDate>Wed, 17 Aug 2022 12:00:04 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-refcell/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch15-05-interior-mutability.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第15.5章 &lt;code&gt;RefCell&amp;lt;T&amp;gt; 和内部可变性模式&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;《Rust 程序设计语言》&lt;/code&gt;上这一章，我实在是&lt;code&gt;懒得吐槽&lt;/code&gt;，举的例子太啰嗦(复杂)，这一章不建议看这本书&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于这一章，我推荐看下面这本&lt;code&gt;开源&lt;/code&gt;书&lt;/p&gt;
&lt;p&gt;参考章节《&lt;a href=&#34;https://course.rs/advance/smart-pointer/cell-refcell.html&#34;&gt;Rust语言圣经(Rust Course)&lt;/a&gt;》第3.4.5章 &lt;code&gt;Cell 和 RefCell 内部可变性&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(28)-Rc&lt;T&gt;</title>
      <link>http://wjinlei.github.io/posts/code-rust-rc/</link>
      <pubDate>Wed, 17 Aug 2022 09:45:45 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-rc/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch15-04-rc.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第15.4章 &lt;code&gt;Rc&amp;lt;T&amp;gt; 引用计数智能指针&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust 有一个叫做 &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; 的类型。其名称为 &lt;code&gt;引用计数（reference counting）&lt;/code&gt;的缩写。&lt;br&gt;
&lt;code&gt;引用计数&lt;/code&gt;意味着&lt;code&gt;记录一个值引用的数量&lt;/code&gt;来知晓这个值是否仍在被使用。如果某个值有&lt;code&gt;0&lt;/code&gt;个引用，就代表没有任何有效引用并可以被清理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;书上叫它&lt;code&gt;引用计数智能指针&lt;/code&gt;，我更喜欢把它叫做&lt;code&gt;可克隆型智能指针&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一想到&lt;code&gt;可克隆&lt;/code&gt;就能想到&lt;code&gt;Rc::clone&lt;/code&gt;，就能想到&lt;code&gt;多有权&lt;/code&gt;，就能想到&lt;code&gt;引用计数&lt;/code&gt; (&lt;code&gt;PS:这只是我的叫法，大家可根据自己的理解随意发挥&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(27)-Drop trait</title>
      <link>http://wjinlei.github.io/posts/code-rust-drop/</link>
      <pubDate>Tue, 16 Aug 2022 16:24:42 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-drop/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch15-03-drop.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第15.3章 &lt;code&gt;使用 Drop Trait 运行清理代码&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于智能指针模式来说第二个重要的 &lt;code&gt;trait&lt;/code&gt; 是 &lt;code&gt;Drop&lt;/code&gt;，其允许我们在值要离开作用域时执行一些代码。一些语言也把这个东西叫做 &lt;code&gt;析构函数&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(26)-Deref trait</title>
      <link>http://wjinlei.github.io/posts/code-rust-deref/</link>
      <pubDate>Tue, 16 Aug 2022 15:16:49 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-deref/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch15-02-deref.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第15.2章 &lt;code&gt;通过 Deref trait 将智能指针当作常规引用处理&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们可以像使用常规引用一样使用 &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;，请看如下代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; y &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Box&lt;/span&gt;::new(x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    assert_eq!(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;y); &lt;span style=&#34;color:#6272a4&#34;&gt;// 对 y 做解引用, 我们可以像使用常规引用一样使用 Box&amp;lt;T&amp;gt;, Rust 底层实际做了 *(y.deref()) 操作
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在之前的章节中我们说，智能指针就是一个&lt;code&gt;结构体&lt;/code&gt;，那为什么我们可以对&lt;code&gt;结构体&lt;/code&gt;做 &lt;code&gt;*&lt;/code&gt; 解引用运算呢？答案就是 &lt;code&gt;Deref trait&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实现 &lt;code&gt;Deref trait&lt;/code&gt; 允许我们重载 &lt;code&gt;解引用运算符 *&lt;/code&gt;。通过这种方式实现 &lt;code&gt;Deref trait&lt;/code&gt; 的智能指针可以被当作常规引用来对待，可以编写操作引用的代码并用于智能指针。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(25)-Box&lt;T&gt;</title>
      <link>http://wjinlei.github.io/posts/code-rust-box/</link>
      <pubDate>Tue, 16 Aug 2022 13:47:20 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-box/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch15-01-box.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第15.1章 &lt;code&gt;使用Box &amp;lt;T&amp;gt;指向堆上的数据&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是智能指针？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先说说我的一个直观感觉，智能指针就是一个有特殊功能的&lt;code&gt;结构体&lt;/code&gt;，然后感兴趣可以去看看知乎对该问题的&lt;a href=&#34;https://www.zhihu.com/question/20368881&#34;&gt;回答&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(24)-迭代器</title>
      <link>http://wjinlei.github.io/posts/code-rust-iterator/</link>
      <pubDate>Mon, 15 Aug 2022 15:16:11 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-iterator/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch13-02-iterators.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第13.2章 &lt;code&gt;使用迭代器处理元素序列&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;迭代器是遍历数据的一种方式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;迭代器模式允许你对一个序列的项进行某些处理。&lt;br&gt;
迭代器（iterator）负责遍历序列中的每一项和决定序列何时结束的逻辑。当使用迭代器时，我们无需重新实现这些逻辑。&lt;br&gt;
在 Rust 中，迭代器是 惰性的（lazy），这意味着在调用方法使用迭代器之前它都不会有效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先看一个例子&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;迭代器的第一种使用方法&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; v1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; vec![&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; v1_iter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; v1.iter(); &lt;span style=&#34;color:#6272a4&#34;&gt;// 创建一个迭代器
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// 通过 for 循环的方式来使用迭代器
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; val &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; v1_iter {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        println!(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Got: {}&amp;#34;&lt;/span&gt;, val);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(23)-闭包</title>
      <link>http://wjinlei.github.io/posts/code-rust-closures/</link>
      <pubDate>Mon, 15 Aug 2022 10:03:36 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-closures/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch13-01-closures.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第13.1章 &lt;code&gt;闭包：可以捕获环境的匿名函数&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;闭包是可以保存在一个变量中或作为参数传递给其他函数的匿名函数。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(22)-测试</title>
      <link>http://wjinlei.github.io/posts/code-rust-tests/</link>
      <pubDate>Fri, 12 Aug 2022 10:14:02 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-tests/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch11-00-testing.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第11章 &lt;code&gt;编写自动化测试&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;为你的程序编写测试是一个良好的习惯(尽管大部分人不愿意这么做，包括我自己，囧)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(21)-生命周期</title>
      <link>http://wjinlei.github.io/posts/code-rust-lifetime/</link>
      <pubDate>Wed, 10 Aug 2022 14:42:31 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-lifetime/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch10-03-lifetime-syntax.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第10.3章 &lt;code&gt;生命周期确保引用有效&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;生命周期有什么用？答：避免出现&lt;code&gt;悬垂引用&lt;/code&gt;问题，那么问题来了，什么是&lt;code&gt;悬垂引用&lt;/code&gt;？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;引用的对象已经被释放，但指针依然指向它，这会导致程序引用非预期的数据。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;先说说看完书中这一章我自己的理解&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生命周期是给谁看的？答：&lt;code&gt;编译器！&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;生命周期就好像一套&lt;code&gt;规则&lt;/code&gt;，告诉编译器以这个规则给我检查代码是否满足要求&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(20)-trait</title>
      <link>http://wjinlei.github.io/posts/code-rust-trait/</link>
      <pubDate>Tue, 09 Aug 2022 13:54:52 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-trait/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch10-02-traits.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第10.2章 &lt;code&gt;Trait：定义共同行为&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;trait&lt;/code&gt; 类似其他语言中的 &lt;code&gt;接口&lt;/code&gt; 的概念，我们可以通过 &lt;code&gt;trait&lt;/code&gt; 以一种抽象的方式定义共享的行为。&lt;/p&gt;
&lt;p&gt;书中这一段解释得很好，建议多读几次&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个类型的行为由其可供调用的方法构成。如果可以对不同类型调用相同的方法的话，这些类型就可以共享相同的行为了。&lt;br&gt;
&lt;code&gt;trait&lt;/code&gt; 定义是一种将方法签名组合起来的方法，目的是定义一个实现某些目的所必需的行为的集合。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(19)-泛型</title>
      <link>http://wjinlei.github.io/posts/code-rust-generics/</link>
      <pubDate>Mon, 08 Aug 2022 17:17:23 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-generics/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch10-01-syntax.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第10章 &lt;code&gt;泛型数据类型&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;泛型能够让你写出&lt;code&gt;更通用的代码&lt;/code&gt;，但也会使你的代码&lt;code&gt;更加复杂&lt;/code&gt;，&lt;code&gt;不易读&lt;/code&gt;，一眼看去&lt;code&gt;全是各种符号&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们先来看一个在函数中使用泛型的例子&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(18)-错误处理</title>
      <link>http://wjinlei.github.io/posts/code-rust-result/</link>
      <pubDate>Mon, 08 Aug 2022 13:43:04 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-result/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch09-00-error-handling.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第9章 &lt;code&gt;错误处理&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust 将错误分为两大类：可恢复的(recoverable)和 不可恢复的(unrecoverable)错误。这一点和Go有点类似&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(17)-HashMap</title>
      <link>http://wjinlei.github.io/posts/code-rust-hashmap/</link>
      <pubDate>Thu, 04 Aug 2022 14:28:00 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-hashmap/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch08-02-strings.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第8.3章 &lt;code&gt;使用 Hash Map 储存键值对&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HashMap&lt;/code&gt; 是一种&lt;code&gt;键值对&lt;/code&gt;类型的容器，&lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; 储存了一个键类型 &lt;code&gt;K&lt;/code&gt; 对应一个值类型 &lt;code&gt;V&lt;/code&gt; 的映射。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(16)-String</title>
      <link>http://wjinlei.github.io/posts/code-rust-string/</link>
      <pubDate>Thu, 04 Aug 2022 10:31:13 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-string/</guid>
      <description>&lt;p&gt;参考章节《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch08-02-strings.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第8.2章 &lt;code&gt;使用字符串储存 UTF-8 编码的文本&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在集合章节中讨论字符串的原因是，字符串就是作为字节的集合外加一些方法实现的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在之前的章节我门曾了解过字符串 slice：它们是一些储存在别处的 UTF-8 编码字符串数据的引用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust 的核心语言中只有一种字符串类型：str，它通常以被借用的形式出现，&amp;amp;str。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而&lt;code&gt;String&lt;/code&gt;是由标准库提供的，而没有写进核心语言部分，它是&lt;code&gt;可增长的&lt;/code&gt;、&lt;code&gt;可变的&lt;/code&gt;、&lt;code&gt;有所有权的&lt;/code&gt;、&lt;code&gt;UTF-8 编码的&lt;/code&gt;字符串类型。&lt;br&gt;
你可以把它理解为&lt;code&gt;Java&lt;/code&gt;中的&lt;code&gt;字符串包装类&lt;/code&gt;，它提供了一系列方便的功能，下面我门就来看看它的大致用法&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(15)-Vector</title>
      <link>http://wjinlei.github.io/posts/code-rust-vector/</link>
      <pubDate>Wed, 03 Aug 2022 14:46:41 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-vector/</guid>
      <description>&lt;p&gt;Vector 是《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch08-01-vectors.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第8.1章 &lt;code&gt;使用 Vector 储存列表&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我想强调是，书中这一章节主要是在讲集合，集合是一种存储数据的容器，&lt;br&gt;
我把它理解为一种工具，对于这种工具我们不用太过纠结其原理，只要大致了解下它有什么用，怎么用，在适合的时候，能想的起来应该用它就行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Vector 的特点: 只能储存相同类型的值，Vector 可以理解为一个动态数组&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(14)-模块系统</title>
      <link>http://wjinlei.github.io/posts/code-rust-mod/</link>
      <pubDate>Wed, 03 Aug 2022 10:45:50 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-mod/</guid>
      <description>&lt;p&gt;模块系统 是《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第7章的全部内容，啰里八嗦了一整章，人都绕晕了，我相信大家和我一样，哈哈哈&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是包(Packages)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;简单来说，你的项目就是一个包，每一个包(Package)都有一个&lt;code&gt;Cargo.toml&lt;/code&gt;文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;用 cargo new xxx 创建出来的项目 xxx 就是一个二进制包  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;用 cargo new --lib xxx 创建出来的项目 xxx 就是一个类库包
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;什么是箱(Crate)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;箱(Crate)类似一种&lt;code&gt;&amp;quot;看不见，摸不着&amp;quot;&lt;/code&gt;的概念，它是一个模块的树形结构，它形成了库或二进制项目&lt;br&gt;
Crate 会将一个作用域内的相关功能分组到一起，使得该功能可以很方便地在多个项目之间共享。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;编译生成的可执行文件，你就可以把它看成是一个箱(Crate)，一个库(lib)项目，你也可以把他看成是一个箱(Crate)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;一个包下至少有一个箱(Crate), 可以是类库箱(Crate)，也可以是二进制箱(Crate)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;一个包下可以包含任意多个二进制箱(Crate)，但只能包含 0 或 1个类库箱(Crate)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Rust中的默认箱(crate):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;src/main.rs // 二进制箱(binary crate)的根文件,该箱(crate)与包(package)同名
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;src/lib.rs  // 类库箱(library crate)的根文件 ,该箱(crate)与包(package)同名
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;多个二进制箱(binary crates):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;在src/bin目录下创建.rs文件, 每个文件都是一个二进制箱(Crate)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(13)-if-let</title>
      <link>http://wjinlei.github.io/posts/code-rust-iflet/</link>
      <pubDate>Tue, 02 Aug 2022 15:44:53 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-iflet/</guid>
      <description>&lt;p&gt;&lt;code&gt;if let&lt;/code&gt; 是一个语法糖，它可以简化 &lt;code&gt;match&lt;/code&gt; 的写法&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(12)-match</title>
      <link>http://wjinlei.github.io/posts/code-rust-match/</link>
      <pubDate>Tue, 02 Aug 2022 14:19:35 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-match/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;match&lt;/code&gt; 允许我们将一个值与一系列的模式相比较，并根据相匹配的模式执行相应代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上一节我们学习了&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;，这一节我们就来学习下，如何处理&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们先看一个简单的例子，处理&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; x: &lt;span style=&#34;color:#8be9fd&#34;&gt;i8&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; y: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Option&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;i8&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Some&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// 处理`Option`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; z &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;match&lt;/span&gt; y {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Some&lt;/span&gt;(i) &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; i,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sum &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; z;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(11)-Option</title>
      <link>http://wjinlei.github.io/posts/code-rust-option/</link>
      <pubDate>Mon, 25 Jul 2022 17:09:02 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-option/</guid>
      <description>&lt;p&gt;我们之前提到了在Rust中有一个非常常用的枚举 &lt;code&gt;Option&lt;/code&gt;，它的原型是如下的样子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Option&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;None&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Some&lt;/span&gt;(T),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它代表了有值和没有值的情况，成员 &lt;code&gt;None&lt;/code&gt; 代表没有值，也就是空值的情况，&lt;code&gt;Some(T)&lt;/code&gt; 代表了有值的情况，换句话说 &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 代表了一个可能为空的值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; 枚举是如此有用以至于它甚至被包含在了 &lt;code&gt;prelude&lt;/code&gt; 之中，你不需要将其显式引入作用域。&lt;br&gt;
另外，它的成员也是如此，可以不需要 Option:: 前缀来直接使用 Some 和 None。即便如此 Some(T) 和 None 仍是 Option&lt;!-- raw HTML omitted --&gt; 的成员。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;这有什么好处或者说什么用处呢？Rust为什么要这么设计它？它和其他语言中的&lt;code&gt;null&lt;/code&gt;有什么不同？下面我说说我的见解&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(10)-枚举</title>
      <link>http://wjinlei.github.io/posts/code-rust-enum/</link>
      <pubDate>Mon, 25 Jul 2022 16:00:57 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-enum/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch06-00-enums.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第6.1章 &lt;code&gt;枚举&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;p&gt;枚举是一个很多语言都有的功能，不过不同语言中其功能各不相同，Rust中的枚举允许你通过列举可能的成员（variants）来定义一个类型&lt;/p&gt;
&lt;p&gt;枚举主要作用是限制传入或传出的类型，避免出现其他类型，这在Rust中有一个著名的枚举 &lt;code&gt;Option&lt;/code&gt; 我们稍后会学习&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(9)-方法</title>
      <link>http://wjinlei.github.io/posts/code-rust-method/</link>
      <pubDate>Mon, 25 Jul 2022 15:13:51 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-method/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch05-03-method-syntax.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第5.3章 &lt;code&gt;方法语法&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;p&gt;之前我们提到过 &lt;code&gt;方法&lt;/code&gt; 就是 &lt;code&gt;函数&lt;/code&gt;，只不过他是定义在结构体上下文中的，这个就是其他语言中的方法的概念一样，没什么好说的&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(8)-结构体</title>
      <link>http://wjinlei.github.io/posts/code-rust-struct/</link>
      <pubDate>Mon, 25 Jul 2022 14:29:56 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-struct/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch05-00-structs.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第5.1章 &lt;code&gt;结构体的定义和实例化&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;p&gt;结构体类似其他语言中的 &lt;code&gt;类 class&lt;/code&gt; 的概念，其作用主要是组织和存储相关联的数据或函数(与结构体相关联的函数一般又称为方法)&lt;/p&gt;
&lt;p&gt;本章我们主要来看下在 &lt;code&gt;Rust&lt;/code&gt; 中定义结构体的语法，比较简单，直接看代码吧&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(7)-Slice</title>
      <link>http://wjinlei.github.io/posts/code-rust-slice/</link>
      <pubDate>Fri, 22 Jul 2022 17:10:59 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-slice/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch04-03-slices.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第4.3章 &lt;code&gt;Slice 类型&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;slice 允许你引用集合中一段连续的元素序列，而不用引用整个集合。slice 是一类引用，所以它没有所有权。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本章比较简单，直接看代码吧&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(6)-引用与借用</title>
      <link>http://wjinlei.github.io/posts/code-rust-references_and_borrowing/</link>
      <pubDate>Fri, 22 Jul 2022 16:03:37 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-references_and_borrowing/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch04-02-references-and-borrowing.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第4.2章 &lt;code&gt;引用与借用&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;之前我们说过，当传入的变量发生移动时，函数外部无法再引用这个变量，除非函数将变量返回并且外部重新获取这个返回值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果我们还要接着使用这个变量的话，每次都传进去再返回来就有点麻烦了&lt;/p&gt;
&lt;p&gt;如果我们只想要函数使用一个变量的值，但不获取其所有权该怎么办呢？ 答: 可以使用 &lt;code&gt;&amp;amp;&lt;/code&gt; 关键字&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(5)-最最最重要的所有权</title>
      <link>http://wjinlei.github.io/posts/code-rust-ownership/</link>
      <pubDate>Thu, 21 Jul 2022 14:21:58 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-ownership/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch04-01-what-is-ownership.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第4.1章 &lt;code&gt;什么是所有权&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;p&gt;&lt;code&gt;所有权&lt;/code&gt;是整个&lt;code&gt;Rust&lt;/code&gt;中最重要的知识点，没有之一，理解&lt;code&gt;所有权&lt;/code&gt;才能明白&lt;code&gt;Rust&lt;/code&gt;是如何保证&lt;code&gt;内存安全的&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(4)-函数</title>
      <link>http://wjinlei.github.io/posts/code-rust-function/</link>
      <pubDate>Thu, 21 Jul 2022 14:02:46 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-function/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch03-03-how-functions-work.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第3.3 &lt;code&gt;函数&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里说明一下，有些章节，我认为没什么可写的，因此跳过了，例如本次就跳过了书中的3.2数据类型这一章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;code&gt;Rust&lt;/code&gt;中函数使用&lt;code&gt;fn&lt;/code&gt;关键字命名，并且采用&lt;code&gt;snake case&lt;/code&gt;风格，在&lt;code&gt;Rust&lt;/code&gt;中函数的返回值等同于函数体最后一个表达式的值&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(3)-变量与可变性</title>
      <link>http://wjinlei.github.io/posts/code-rust-mutvar/</link>
      <pubDate>Wed, 20 Jul 2022 15:13:53 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-mutvar/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch03-01-variables-and-mutability.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第3.1 &lt;code&gt;变量与可变性&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;变量默认是不可改变的，如果声明一个变量不会变，它就真的不会变&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;所以你不必自己跟踪它，你不必担心它会在其他地方被改变&lt;/code&gt;，因此它能让你的代码更&lt;strong&gt;易于推导&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(2)-猜数字游戏</title>
      <link>http://wjinlei.github.io/posts/code-rust-guessing_game/</link>
      <pubDate>Wed, 20 Jul 2022 14:12:50 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-guessing_game/</guid>
      <description>&lt;p&gt;本篇是阅读 《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/ch02-00-guessing-game-tutorial.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》第二章 &lt;code&gt;写个猜数字游戏&lt;/code&gt; 而来的结果&lt;/p&gt;
&lt;p&gt;下面是项目依赖&lt;code&gt;Cargo.toml&lt;/code&gt;，我们需要用到 &lt;code&gt;rand&lt;/code&gt; 这个 &lt;code&gt;crate&lt;/code&gt;，&lt;code&gt;rand&lt;/code&gt;为我们提供了产生随机数的功能，这在我们的代码中会用到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;crate&lt;/code&gt;你可以把他理解为&lt;code&gt;Java中的包&lt;/code&gt;或者其他语言中的库的概念&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[package]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rs03-guessing_game&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;version = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;edition = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2018&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[dependencies]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rand = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0.8.3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Rust 学习笔记(1)-安装Rust</title>
      <link>http://wjinlei.github.io/posts/code-rust-hello/</link>
      <pubDate>Wed, 20 Jul 2022 11:40:57 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-hello/</guid>
      <description>&lt;p&gt;21年的时候粗略过了一遍《&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/title-page.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;》,觉得&lt;code&gt;Rust&lt;/code&gt;的很多设计理念非常不错，是门不错的语言&lt;/p&gt;
&lt;p&gt;但当时由于种种原因，没有把学到的用于实践，过了近一年，现在都差不多全忘了，囧&lt;/p&gt;
&lt;p&gt;而如今我的博客也弄好了，索性就重新开坑，学习下&lt;code&gt;Rust&lt;/code&gt;，今天就先记录下我在&lt;code&gt;Arch&lt;/code&gt;上安装&lt;code&gt;Rust&lt;/code&gt;，并写个&lt;code&gt;Hello World&lt;/code&gt;吧&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式之适配器模式(rust实现)</title>
      <link>http://wjinlei.github.io/posts/code-rust-adapter/</link>
      <pubDate>Thu, 04 Nov 2021 01:41:53 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rust-adapter/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;设计模式之适配器模式(Rust实现)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>rust读写ini</title>
      <link>http://wjinlei.github.io/posts/code-rustini/</link>
      <pubDate>Thu, 04 Nov 2021 01:39:54 +0800</pubDate>
      
      <guid>http://wjinlei.github.io/posts/code-rustini/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;代码示例(需要 configparser 库)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
